{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f3b4ce72-7545-485d-b5af-2626203266bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception in Tkinter callback\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\okan.cobanoglu\\AppData\\Local\\anaconda3\\Lib\\tkinter\\__init__.py\", line 1967, in __call__\n",
      "    return self.func(*args)\n",
      "           ^^^^^^^^^^^^^^^^\n",
      "  File \"C:\\Users\\okan.cobanoglu\\AppData\\Local\\Temp\\ipykernel_27048\\3855972898.py\", line 527, in <lambda>\n",
      "    ttk.Button(date_frame1, text=\"...\", width=3, command=lambda: self.select_date(self.entry_start), style=\"secondary.TButton\").pack(side=\"left\")\n",
      "                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"C:\\Users\\okan.cobanoglu\\AppData\\Local\\Temp\\ipykernel_27048\\3855972898.py\", line 483, in select_date\n",
      "    cal = Calendar(date_popup, selectmode='day', date_pattern='yyyy-mm-dd')\n",
      "          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"C:\\Users\\okan.cobanoglu\\AppData\\Local\\anaconda3\\Lib\\site-packages\\tkcalendar\\calendar_.py\", line 224, in __init__\n",
      "    ttk.Frame.__init__(self, master, class_=classname, cursor=curs, name=name)\n",
      "  File \"C:\\Users\\okan.cobanoglu\\AppData\\Local\\anaconda3\\Lib\\site-packages\\ttkbootstrap\\style.py\", line 5107, in __init__\n",
      "    self.configure(style=ttkstyle)\n",
      "  File \"C:\\Users\\okan.cobanoglu\\AppData\\Local\\anaconda3\\Lib\\site-packages\\tkcalendar\\calendar_.py\", line 1612, in configure\n",
      "    self[item] = value\n",
      "    ~~~~^^^^^^\n",
      "  File \"C:\\Users\\okan.cobanoglu\\AppData\\Local\\anaconda3\\Lib\\site-packages\\tkcalendar\\calendar_.py\", line 517, in __setitem__\n",
      "    if key not in self._properties:\n",
      "                  ^^^^^^^^^^^^^^^^\n",
      "AttributeError: 'Calendar' object has no attribute '_properties'\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "from pathlib import Path\n",
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox, filedialog\n",
    "from tkcalendar import Calendar\n",
    "from datetime import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "import matplotlib.dates as mdates\n",
    "from matplotlib.figure import Figure\n",
    "import ttkbootstrap as ttk\n",
    "from ttkbootstrap.constants import *\n",
    "from ttkbootstrap.tooltip import ToolTip\n",
    "import re\n",
    "\n",
    "class FarmTaskTracker:\n",
    "    \"\"\"A class to manage farm task tracking with a GUI interface.\"\"\"\n",
    "    \n",
    "    def __init__(self):\n",
    "        # Set default directory for Excel file (user's home directory)\n",
    "        self.data_dir = Path.home() / \"FarmTasks\"\n",
    "        self.data_dir.mkdir(exist_ok=True)\n",
    "        self.excel_file = self.data_dir / \"farm_tasks.xlsx\"\n",
    "        self.selected_task_id = None\n",
    "        self.root = None\n",
    "        self.setup_excel_file()\n",
    "        self.setup_gui()\n",
    "\n",
    "    def setup_excel_file(self):\n",
    "        \"\"\"Create the Excel file if it doesn't exist.\"\"\"\n",
    "        try:\n",
    "            if not self.excel_file.exists():\n",
    "                df = pd.DataFrame(columns=[\n",
    "                    \"ID\", \"Job Name\", \"Description\", \"Start Date\", \"End Date\",\n",
    "                    \"Estimated Cost\", \"Actual Cost\", \"Status\"\n",
    "                ])\n",
    "                df.to_excel(self.excel_file, index=False)\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Excel dosyası oluşturulamadı: {e}\")\n",
    "\n",
    "    def load_tasks(self):\n",
    "        \"\"\"Load tasks from the Excel file.\"\"\"\n",
    "        try:\n",
    "            return pd.read_excel(self.excel_file)\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Excel dosyası yüklenemedi: {e}\")\n",
    "            return pd.DataFrame()\n",
    "\n",
    "    def validate_date(self, date_str):\n",
    "        \"\"\"Validate date format (YYYY-MM-DD).\"\"\"\n",
    "        try:\n",
    "            datetime.strptime(date_str, '%Y-%m-%d')\n",
    "            return True\n",
    "        except ValueError:\n",
    "            return False\n",
    "\n",
    "    def validate_cost(self, cost_str):\n",
    "        \"\"\"Validate cost input (numeric and non-negative).\"\"\"\n",
    "        try:\n",
    "            return float(cost_str) >= 0\n",
    "        except (ValueError, TypeError):\n",
    "            return False\n",
    "\n",
    "    def add_task(self):\n",
    "        \"\"\"Add a new task to the Excel file.\"\"\"\n",
    "        try:\n",
    "            name = self.entry_name.get().strip()\n",
    "            desc = self.entry_desc.get().strip()\n",
    "            start_date = self.entry_start.get().strip()\n",
    "            end_date = self.entry_end.get().strip()\n",
    "            estimated_cost = self.entry_estimated.get().strip()\n",
    "            actual_cost = self.entry_actual.get().strip()\n",
    "            status = \"Done\" if self.check_status.get() else \"Waiting\"\n",
    "\n",
    "            # Input validation\n",
    "            if not name:\n",
    "                messagebox.showerror(\"Hata\", \"Görev adı boş olamaz!\")\n",
    "                return\n",
    "            if not (self.validate_date(start_date) and self.validate_date(end_date)):\n",
    "                messagebox.showerror(\"Hata\", \"Tarih formatı YYYY-MM-DD olmalı!\")\n",
    "                return\n",
    "            if not self.validate_cost(estimated_cost):\n",
    "                messagebox.showerror(\"Hata\", \"Tahmini maliyet geçerli bir sayı olmalı!\")\n",
    "                return\n",
    "            if status == \"Done\" and not self.validate_cost(actual_cost):\n",
    "                messagebox.showerror(\"Hata\", \"Gerçekleşen maliyet geçerli bir sayı olmalı!\")\n",
    "                return\n",
    "\n",
    "            estimated_cost = float(estimated_cost)\n",
    "            actual_cost = float(actual_cost) if status == \"Done\" else 0\n",
    "\n",
    "            df = self.load_tasks()\n",
    "            new_id = len(df) + 1\n",
    "            new_task = pd.DataFrame([[new_id, name, desc, start_date, end_date,\n",
    "                                    estimated_cost, actual_cost, status]], columns=df.columns)\n",
    "            df = pd.concat([df, new_task], ignore_index=True)\n",
    "            df.to_excel(self.excel_file, index=False)\n",
    "            messagebox.showinfo(\"Başarılı\", \"Görev başarıyla eklendi!\")\n",
    "            self.clear_entries()\n",
    "            self.show_tasks()\n",
    "            self.status_label.configure(text=\"Görev eklendi.\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Bir hata oluştu: {e}\")\n",
    "\n",
    "    def clear_entries(self):\n",
    "        \"\"\"Clear all input fields.\"\"\"\n",
    "        self.entry_name.delete(0, tk.END)\n",
    "        self.entry_desc.delete(0, tk.END)\n",
    "        self.entry_start.delete(0, tk.END)\n",
    "        self.entry_end.delete(0, tk.END)\n",
    "        self.entry_estimated.delete(0, tk.END)\n",
    "        self.entry_actual.delete(0, tk.END)\n",
    "        self.check_status.set(0)\n",
    "\n",
    "    def load_selected_task(self):\n",
    "        \"\"\"Load selected task into input fields.\"\"\"\n",
    "        selected = self.table.selection()\n",
    "        if not selected:\n",
    "            messagebox.showwarning(\"Uyarı\", \"Lütfen düzenlemek için bir görev seçin.\")\n",
    "            return\n",
    "\n",
    "        values = self.table.item(selected, \"values\")\n",
    "        self.selected_task_id = int(values[0])\n",
    "\n",
    "        self.clear_entries()\n",
    "        self.entry_name.insert(0, values[1])\n",
    "        self.entry_desc.insert(0, values[2])\n",
    "        self.entry_start.insert(0, values[3])\n",
    "        self.entry_end.insert(0, values[4])\n",
    "        self.entry_estimated.insert(0, values[5])\n",
    "        self.entry_actual.insert(0, values[6])\n",
    "        self.check_status.set(1 if values[7] == \"Done\" else 0)\n",
    "        self.status_label.configure(text=\"Görev düzenlenmek için yüklendi.\")\n",
    "\n",
    "    def update_task(self):\n",
    "        \"\"\"Update the selected task.\"\"\"\n",
    "        if self.selected_task_id is None:\n",
    "            messagebox.showerror(\"Hata\", \"Güncelleme için görev seçilmedi.\")\n",
    "            return\n",
    "        try:\n",
    "            df = self.load_tasks()\n",
    "            idx = df[df[\"ID\"] == self.selected_task_id].index[0]\n",
    "\n",
    "            name = self.entry_name.get().strip()\n",
    "            desc = self.entry_desc.get().strip()\n",
    "            start_date = self.entry_start.get().strip()\n",
    "            end_date = self.entry_end.get().strip()\n",
    "            estimated_cost = self.entry_estimated.get().strip()\n",
    "            actual_cost = self.entry_actual.get().strip()\n",
    "            status = \"Done\" if self.check_status.get() else \"Waiting\"\n",
    "\n",
    "            # Input validation\n",
    "            if not name:\n",
    "                messagebox.showerror(\"Hata\", \"Görev adı boş olamaz!\")\n",
    "                return\n",
    "            if not (self.validate_date(start_date) and self.validate_date(end_date)):\n",
    "                messagebox.showerror(\"Hata\", \"Tarih formatı YYYY-MM-DD olmalı!\")\n",
    "                return\n",
    "            if not self.validate_cost(estimated_cost):\n",
    "                messagebox.showerror(\"Hata\", \"Tahmini maliyet geçerli bir sayı olmalı!\")\n",
    "                return\n",
    "            if status == \"Done\" and not self.validate_cost(actual_cost):\n",
    "                messagebox.showerror(\"Hata\", \"Gerçekleşen maliyet geçerli bir sayı olmalı!\")\n",
    "                return\n",
    "\n",
    "            df.at[idx, \"Job Name\"] = name\n",
    "            df.at[idx, \"Description\"] = desc\n",
    "            df.at[idx, \"Start Date\"] = start_date\n",
    "            df.at[idx, \"End Date\"] = end_date\n",
    "            df.at[idx, \"Estimated Cost\"] = float(estimated_cost)\n",
    "            df.at[idx, \"Actual Cost\"] = float(actual_cost) if status == \"Done\" else 0\n",
    "            df.at[idx, \"Status\"] = status\n",
    "\n",
    "            df.to_excel(self.excel_file, index=False)\n",
    "            messagebox.showinfo(\"Başarılı\", \"Görev başarıyla güncellendi.\")\n",
    "            self.selected_task_id = None\n",
    "            self.clear_entries()\n",
    "            self.show_tasks()\n",
    "            self.status_label.configure(text=\"Görev güncellendi.\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Güncelleme başarısız: {e}\")\n",
    "\n",
    "    def delete_task(self):\n",
    "        \"\"\"Delete the selected task.\"\"\"\n",
    "        try:\n",
    "            selected_item = self.table.selection()\n",
    "            if not selected_item:\n",
    "                messagebox.showerror(\"Hata\", \"Lütfen silmek için bir görev seçin!\")\n",
    "                return\n",
    "\n",
    "            result = messagebox.askyesno(\"Onay\", \"Bu görevi silmek istediğinizden emin misiniz?\")\n",
    "            if not result:\n",
    "                return\n",
    "\n",
    "            df = self.load_tasks()\n",
    "            selected_id = int(self.table.item(selected_item, \"values\")[0])\n",
    "            df = df[df[\"ID\"] != selected_id]\n",
    "            df[\"ID\"] = range(1, len(df) + 1)\n",
    "            df.to_excel(self.excel_file, index=False)\n",
    "            messagebox.showinfo(\"Başarılı\", \"Görev başarıyla silindi!\")\n",
    "            self.clear_entries()\n",
    "            self.show_tasks()\n",
    "            self.status_label.configure(text=\"Görev silindi.\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Bir hata oluştu: {e}\")\n",
    "\n",
    "    def show_tasks(self, filter_status=None):\n",
    "        \"\"\"Display tasks in the table, optionally filtered by status.\"\"\"\n",
    "        try:\n",
    "            df = self.load_tasks()\n",
    "            if filter_status:\n",
    "                df = df[df[\"Status\"] == filter_status]\n",
    "            self.table.delete(*self.table.get_children())\n",
    "            for _, row in df.iterrows():\n",
    "                self.table.insert(\"\", \"end\", values=row.tolist())\n",
    "            self.status_label.configure(text=f\"{len(df)} görev görüntülendi.\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Görevler yüklenemedi: {e}\")\n",
    "\n",
    "    def show_calendar(self, filtered_df=None, save_as_pdf=False):\n",
    "        \"\"\"Display a calendar view of tasks.\"\"\"\n",
    "        try:\n",
    "            df = filtered_df if filtered_df is not None else self.load_tasks()\n",
    "            df = df.copy()\n",
    "            df[\"Start Date\"] = pd.to_datetime(df[\"Start Date\"], errors=\"coerce\")\n",
    "            df[\"End Date\"] = pd.to_datetime(df[\"End Date\"], errors=\"coerce\")\n",
    "            df = df.dropna(subset=[\"Start Date\", \"End Date\"])\n",
    "\n",
    "            grouped = df.groupby(\"Job Name\")\n",
    "            collapsed_tasks = []\n",
    "\n",
    "            for name, group in grouped:\n",
    "                start = group[\"Start Date\"].min()\n",
    "                end = group[\"End Date\"].max()\n",
    "                desc = \" / \".join(group[\"Description\"].dropna().astype(str).unique())\n",
    "                collapsed_tasks.append({\n",
    "                    \"Job Name\": name,\n",
    "                    \"Start Date\": start,\n",
    "                    \"End Date\": end,\n",
    "                    \"Descriptions\": desc,\n",
    "                    \"Details\": group\n",
    "                })\n",
    "\n",
    "            collapsed_tasks.sort(key=lambda x: x[\"Start Date\"])\n",
    "            fig, ax = plt.subplots(figsize=(14, max(6, len(collapsed_tasks) * 0.5)))\n",
    "\n",
    "            total_actual = 0\n",
    "            total_estimated = 0\n",
    "\n",
    "            for idx, task in enumerate(collapsed_tasks):\n",
    "                start = task[\"Start Date\"]\n",
    "                end = task[\"End Date\"]\n",
    "                duration = (end - start).days or 1\n",
    "\n",
    "                done_cost = task[\"Details\"].loc[task[\"Details\"][\"Status\"] == \"Done\", \"Actual Cost\"].sum()\n",
    "                wait_cost = task[\"Details\"].loc[task[\"Details\"][\"Status\"] == \"Waiting\", \"Estimated Cost\"].sum()\n",
    "                total_cost = done_cost + wait_cost\n",
    "\n",
    "                done_ratio = done_cost / total_cost if total_cost else 0\n",
    "                wait_ratio = wait_cost / total_cost if total_cost else 0\n",
    "\n",
    "                done_days = int(duration * done_ratio)\n",
    "                wait_days = int(duration * wait_ratio)\n",
    "\n",
    "                done_end = start + pd.Timedelta(days=done_days)\n",
    "                wait_end = done_end + pd.Timedelta(days=wait_days)\n",
    "\n",
    "                if done_cost > 0:\n",
    "                    ax.plot([start, done_end], [idx, idx], color=\"green\", linewidth=4)\n",
    "                    ax.text(done_end, idx + 0.1, f\"Harcanan: {done_cost:,.0f} EUR\".replace(\",\", \".\"), fontsize=8, va=\"bottom\")\n",
    "                    total_actual += done_cost\n",
    "\n",
    "                if wait_cost > 0:\n",
    "                    ax.plot([done_end, wait_end], [idx, idx], color=\"orange\", linewidth=4)\n",
    "                    ax.text(wait_end, idx + 0.1, f\"Beklenen: {wait_cost:,.0f} EUR\".replace(\",\", \".\"), fontsize=8, va=\"bottom\")\n",
    "                    total_estimated += wait_cost\n",
    "\n",
    "            ax.set_yticks(range(len(collapsed_tasks)))\n",
    "            ax.set_yticklabels([t[\"Job Name\"] for t in collapsed_tasks], fontsize=9)\n",
    "            ax.set_title(\"Görev Zaman Çizelgesi ve Maliyet\", fontsize=12, pad=10)\n",
    "            ax.grid(True, linestyle=\"--\", linewidth=0.5)\n",
    "            ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n",
    "            ax.xaxis.set_major_locator(mdates.MonthLocator())\n",
    "            plt.xticks(rotation=45)\n",
    "            plt.tight_layout()\n",
    "\n",
    "            ax.text(\n",
    "                0.01, -0.12,\n",
    "                f\"Harcanan: {total_actual:,.0f} EUR | Beklenen: {total_estimated:,.0f} EUR | Toplam: {(total_actual + total_estimated):,.0f} EUR\".replace(\",\", \".\"),\n",
    "                transform=ax.transAxes,\n",
    "                fontsize=10,\n",
    "                color='black',\n",
    "                ha='left'\n",
    "            )\n",
    "\n",
    "            if save_as_pdf:\n",
    "                file_path = filedialog.asksaveasfilename(defaultextension=\".pdf\", filetypes=[(\"PDF files\", \"*.pdf\")])\n",
    "                if file_path:\n",
    "                    fig.savefig(file_path, format=\"pdf\", bbox_inches='tight')\n",
    "                    messagebox.showinfo(\"Başarılı\", f\"Takvim PDF olarak kaydedildi: {file_path}\")\n",
    "                    self.status_label.configure(text=\"Takvim PDF olarak kaydedildi.\")\n",
    "                plt.close(fig)\n",
    "            else:\n",
    "                cal_window = ttk.Toplevel(self.root)\n",
    "                cal_window.title(\"Takvim Görünümü\")\n",
    "                cal_window.geometry(\"1000x600\")\n",
    "                canvas = FigureCanvasTkAgg(fig, master=cal_window)\n",
    "                canvas.draw()\n",
    "                canvas.get_tk_widget().pack(fill=\"both\", expand=True)\n",
    "                ttk.Button(cal_window, text=\"PDF Olarak Kaydet\", command=lambda: self.show_calendar(filtered_df, save_as_pdf=True), style=\"primary.TButton\").pack(pady=10)\n",
    "                self.status_label.configure(text=\"Takvim açıldı.\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Takvim oluşturulurken hata: {e}\")\n",
    "\n",
    "    def export_calendar_pdf(self):\n",
    "        \"\"\"Export calendar as PDF.\"\"\"\n",
    "        self.show_calendar(save_as_pdf=True)\n",
    "\n",
    "    def open_calendar_selection(self):\n",
    "        \"\"\"Open a window to select date range for expense calculation and calendar display.\"\"\"\n",
    "        try:\n",
    "            popup = ttk.Toplevel(self.root)\n",
    "            popup.title(\"Tarih Aralığı Seç\")\n",
    "            popup.geometry(\"300x300\")\n",
    "\n",
    "            ttk.Label(popup, text=\"Başlangıç Tarihi:\").pack(pady=5)\n",
    "            cal_start = Calendar(popup, selectmode='day', date_pattern='yyyy-mm-dd')\n",
    "            cal_start.pack(pady=5)\n",
    "\n",
    "            ttk.Label(popup, text=\"Bitiş Tarihi:\").pack(pady=5)\n",
    "            cal_end = Calendar(popup, selectmode='day', date_pattern='yyyy-mm-dd')\n",
    "            cal_end.pack(pady=5)\n",
    "\n",
    "            def calculate_and_show_calendar():\n",
    "                try:\n",
    "                    start = pd.to_datetime(cal_start.get_date())\n",
    "                    end = pd.to_datetime(cal_end.get_date())\n",
    "\n",
    "                    if start > end:\n",
    "                        messagebox.showerror(\"Hata\", \"Başlangıç tarihi bitiş tarihinden sonra olamaz!\")\n",
    "                        return\n",
    "\n",
    "                    df = self.load_tasks()\n",
    "                    df[\"Start Date\"] = pd.to_datetime(df[\"Start Date\"], errors=\"coerce\")\n",
    "                    df[\"End Date\"] = pd.to_datetime(df[\"End Date\"], errors=\"coerce\")\n",
    "\n",
    "                    mask = (df[\"Start Date\"] >= start) & (df[\"End Date\"] <= end)\n",
    "                    filtered = df.loc[mask].copy()\n",
    "\n",
    "                    if filtered.empty:\n",
    "                        messagebox.showinfo(\"Bilgi\", \"Belirtilen tarihler arasında görev bulunamadı.\")\n",
    "                        return\n",
    "\n",
    "                    total_actual = filtered.loc[filtered[\"Status\"] == \"Done\", \"Actual Cost\"].sum()\n",
    "                    total_estimated = filtered.loc[filtered[\"Status\"] == \"Waiting\", \"Estimated Cost\"].sum()\n",
    "\n",
    "                    result_text = f\"Toplam Gerçekleşen Maliyet: {total_actual:,.2f} EUR\\nToplam Tahmini Maliyet: {total_estimated:,.2f} EUR\"\n",
    "                    messagebox.showinfo(\"Harcamalar\", result_text)\n",
    "                    self.show_calendar(filtered_df=filtered)\n",
    "                    self.status_label.configure(text=\"Harcama hesaplandı ve takvim gösterildi.\")\n",
    "                except Exception as e:\n",
    "                    messagebox.showerror(\"Hata\", f\"Bir hata oluştu: {e}\")\n",
    "\n",
    "            ttk.Button(popup, text=\"Hesapla ve Göster\", command=calculate_and_show_calendar, style=\"primary.TButton\").pack(pady=10)\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Tarih seçimi penceresi açılırken hata: {e}\")\n",
    "\n",
    "    def export_all_tasks(self):\n",
    "        \"\"\"Export all tasks to a new Excel file.\"\"\"\n",
    "        try:\n",
    "            df = self.load_tasks()\n",
    "            if df.empty:\n",
    "                messagebox.showinfo(\"Bilgi\", \"Aktarılacak görev bulunamadı.\")\n",
    "                return\n",
    "\n",
    "            file_path = filedialog.asksaveasfilename(\n",
    "                defaultextension=\".xlsx\",\n",
    "                filetypes=[(\"Excel files\", \"*.xlsx\"), (\"All files\", \"*.*\")]\n",
    "            )\n",
    "\n",
    "            if not file_path:\n",
    "                return\n",
    "\n",
    "            now = datetime.now().strftime(\"%Y-%m-%d\")\n",
    "            writer = pd.ExcelWriter(file_path, engine='openpyxl')\n",
    "\n",
    "            df.to_excel(writer, index=False, sheet_name='Tüm Görevler')\n",
    "\n",
    "            summary = pd.DataFrame({\n",
    "                'Toplam Görev Sayısı': [len(df)],\n",
    "                'Tamamlanan Görev Sayısı': [len(df[df['Status'] == 'Done'])],\n",
    "                'Bekleyen Görev Sayısı': [len(df[df['Status'] == 'Waiting'])],\n",
    "                'Toplam Gerçekleşen Maliyet': [df[df['Status'] == 'Done']['Actual Cost'].sum()],\n",
    "                'Toplam Beklenen Maliyet': [df[df['Status'] == 'Waiting']['Estimated Cost'].sum()],\n",
    "                'Rapor Tarihi': [now]\n",
    "            })\n",
    "\n",
    "            summary.to_excel(writer, index=False, sheet_name='Özet')\n",
    "            writer.close()\n",
    "            messagebox.showinfo(\"Başarılı\", f\"Tüm görevler dışa aktarıldı: {file_path}\")\n",
    "            self.status_label.configure(text=\"Görevler Excel'e aktarıldı.\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"Dışa aktarma sırasında hata: {e}\")\n",
    "\n",
    "    def show_statistics(self):\n",
    "        \"\"\"Display task statistics.\"\"\"\n",
    "        try:\n",
    "            df = self.load_tasks()\n",
    "            if df.empty:\n",
    "                messagebox.showinfo(\"Bilgi\", \"İstatistik gösterilecek görev bulunamadı.\")\n",
    "                return\n",
    "\n",
    "            df[\"Start Date\"] = pd.to_datetime(df[\"Start Date\"], errors=\"coerce\")\n",
    "            df[\"End Date\"] = pd.to_datetime(df[\"End Date\"], errors=\"coerce\")\n",
    "\n",
    "            stats_window = ttk.Toplevel(self.root)\n",
    "            stats_window.title(\"Görev İstatistikleri\")\n",
    "            stats_window.geometry(\"800x600\")\n",
    "\n",
    "            total_tasks = len(df)\n",
    "            done_tasks = len(df[df[\"Status\"] == \"Done\"])\n",
    "            waiting_tasks = len(df[df[\"Status\"] == \"Waiting\"])\n",
    "            total_actual_cost = df[df[\"Status\"] == \"Done\"][\"Actual Cost\"].sum()\n",
    "            total_estimated_cost = df[df[\"Status\"] == \"Waiting\"][\"Estimated Cost\"].sum()\n",
    "            df[\"Duration\"] = (df[\"End Date\"] - df[\"Start Date\"]).dt.days\n",
    "            avg_duration = df[\"Duration\"].mean()\n",
    "\n",
    "            info_frame = ttk.Frame(stats_window)\n",
    "            info_frame.pack(pady=10, fill=\"x\")\n",
    "            ttk.Label(info_frame, text=f\"Toplam Görev Sayısı: {total_tasks}\", font=(\"Arial\", 12)).pack(anchor=\"w\", pady=2)\n",
    "            ttk.Label(info_frame, text=f\"Tamamlanan Görev Sayısı: {done_tasks}\", font=(\"Arial\", 12)).pack(anchor=\"w\", pady=2)\n",
    "            ttk.Label(info_frame, text=f\"Bekleyen Görev Sayısı: {waiting_tasks}\", font=(\"Arial\", 12)).pack(anchor=\"w\", pady=2)\n",
    "            ttk.Label(info_frame, text=f\"Toplam Gerçekleşen Maliyet: {total_actual_cost:,.2f} EUR\", font=(\"Arial\", 12)).pack(anchor=\"w\", pady=2)\n",
    "            ttk.Label(info_frame, text=f\"Toplam Beklenen Maliyet: {total_estimated_cost:,.2f} EUR\", font=(\"Arial\", 12)).pack(anchor=\"w\", pady=2)\n",
    "            ttk.Label(info_frame, text=f\"Ortalama Görev Süresi: {avg_duration:.1f} gün\", font=(\"Arial\", 12)).pack(anchor=\"w\", pady=2)\n",
    "\n",
    "            fig = Figure(figsize=(8, 8))\n",
    "            ax1 = fig.add_subplot(221)\n",
    "            status_counts = df[\"Status\"].value_counts()\n",
    "            ax1.pie(\n",
    "                status_counts,\n",
    "                labels=status_counts.index,\n",
    "                autopct='%1.1f%%',\n",
    "                colors=['green', 'orange'] if \"Done\" in status_counts.index and \"Waiting\" in status_counts.index else None\n",
    "            )\n",
    "            ax1.set_title(\"Görev Durumu Dağılımı\")\n",
    "\n",
    "            ax2 = fig.add_subplot(222)\n",
    "            cost_data = [total_actual_cost, total_estimated_cost]\n",
    "            ax2.bar(['Gerçekleşen', 'Beklenen'], cost_data, color=['green', 'orange'])\n",
    "            ax2.set_title(\"Maliyet Karşılaştırma\")\n",
    "            ax2.set_ylabel(\"EUR\")\n",
    "\n",
    "            ax3 = fig.add_subplot(212)\n",
    "            df['Month'] = df['Start Date'].dt.to_period('M')\n",
    "            monthly_tasks = df.groupby('Month').size()\n",
    "            ax3.plot(range(len(monthly_tasks)), monthly_tasks.values, marker='o')\n",
    "            ax3.set_xticks(range(len(monthly_tasks)))\n",
    "            ax3.set_xticklabels([str(period) for period in monthly_tasks.index], rotation=45)\n",
    "            ax3.set_title(\"Aylık Görev Sayısı\")\n",
    "            ax3.set_ylabel(\"Görev Sayısı\")\n",
    "            fig.tight_layout()\n",
    "\n",
    "            canvas = FigureCanvasTkAgg(fig, master=stats_window)\n",
    "            canvas.draw()\n",
    "            canvas.get_tk_widget().pack(fill=\"both\", expand=True)\n",
    "            self.status_label.configure(text=\"İstatistikler gösterildi.\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Hata\", f\"İstatistikler oluşturulurken hata: {e}\")\n",
    "\n",
    "    def select_date(self, entry_widget):\n",
    "        \"\"\"Show a date picker and set the selected date in the entry field.\"\"\"\n",
    "        def set_date():\n",
    "            selected_date = cal.get_date()\n",
    "            entry_widget.delete(0, tk.END)\n",
    "            entry_widget.insert(0, selected_date)\n",
    "            date_popup.destroy()\n",
    "\n",
    "        date_popup = ttk.Toplevel(self.root)\n",
    "        date_popup.title(\"Tarih Seç\")\n",
    "        date_popup.geometry(\"300x250\")\n",
    "        cal = Calendar(date_popup, selectmode='day', date_pattern='yyyy-mm-dd')\n",
    "        cal.pack(pady=10)\n",
    "        ttk.Button(date_popup, text=\"Seç\", command=set_date, style=\"primary.TButton\").pack(pady=5)\n",
    "\n",
    "    def setup_gui(self):\n",
    "        \"\"\"Set up the GUI with ttkbootstrap.\"\"\"\n",
    "        self.root = ttk.Window(themename=\"flatly\")  # Modern theme\n",
    "        self.root.title(\"Çiftlik Görev Takip\")\n",
    "        self.root.geometry(\"1000x800\")\n",
    "\n",
    "        # Main frames\n",
    "        input_frame = ttk.LabelFrame(self.root, text=\"Görev Bilgileri\", padding=10)\n",
    "        input_frame.pack(fill=\"x\", padx=10, pady=5)\n",
    "        button_frame = ttk.Frame(self.root)\n",
    "        button_frame.pack(fill=\"x\", padx=10, pady=5)\n",
    "        table_frame = ttk.Frame(self.root)\n",
    "        table_frame.pack(fill=\"both\", expand=True, padx=10, pady=5)\n",
    "        status_frame = ttk.Frame(self.root)\n",
    "        status_frame.pack(fill=\"x\", padx=10, pady=5)\n",
    "\n",
    "        # Status bar\n",
    "        self.status_label = ttk.Label(status_frame, text=\"Hazır\", relief=\"sunken\", anchor=\"w\")\n",
    "        self.status_label.pack(fill=\"x\")\n",
    "\n",
    "        # Input fields\n",
    "        field_width = 40\n",
    "        row1 = ttk.Frame(input_frame)\n",
    "        row1.pack(fill=\"x\", padx=5, pady=5)\n",
    "        ttk.Label(row1, text=\"Görev Adı:\").grid(row=0, column=0, padx=5, pady=2, sticky=\"w\")\n",
    "        self.entry_name = ttk.Entry(row1, width=field_width)\n",
    "        self.entry_name.grid(row=0, column=1, padx=5, pady=2, sticky=\"w\")\n",
    "        ToolTip(self.entry_name, \"Görev adını buraya girin (örn: Elma Hasadı)\")\n",
    "        ttk.Label(row1, text=\"Açıklama:\").grid(row=0, column=2, padx=5, pady=2, sticky=\"w\")\n",
    "        self.entry_desc = ttk.Entry(row1, width=field_width)\n",
    "        self.entry_desc.grid(row=0, column=3, padx=5, pady=2, sticky=\"w\")\n",
    "        ToolTip(self.entry_desc, \"Görevle ilgili detaylı açıklama\")\n",
    "\n",
    "        row2 = ttk.Frame(input_frame)\n",
    "        row2.pack(fill=\"x\", padx=5, pady=5)\n",
    "        ttk.Label(row2, text=\"Başlangıç Tarihi:\").grid(row=0, column=0, padx=5, pady=2, sticky=\"w\")\n",
    "        date_frame1 = ttk.Frame(row2)\n",
    "        date_frame1.grid(row=0, column=1, padx=5, pady=2, sticky=\"w\")\n",
    "        self.entry_start = ttk.Entry(date_frame1, width=field_width-5)\n",
    "        self.entry_start.pack(side=\"left\")\n",
    "        ttk.Button(date_frame1, text=\"...\", width=3, command=lambda: self.select_date(self.entry_start), style=\"secondary.TButton\").pack(side=\"left\")\n",
    "        ToolTip(self.entry_start, \"Başlangıç tarihi (YYYY-MM-DD)\")\n",
    "        ttk.Label(row2, text=\"Bitiş Tarihi:\").grid(row=0, column=2, padx=5, pady=2, sticky=\"w\")\n",
    "        date_frame2 = ttk.Frame(row2)\n",
    "        date_frame2.grid(row=0, column=3, padx=5, pady=2, sticky=\"w\")\n",
    "        self.entry_end = ttk.Entry(date_frame2, width=field_width-5)\n",
    "        self.entry_end.pack(side=\"left\")\n",
    "        ttk.Button(date_frame2, text=\"...\", width=3, command=lambda: self.select_date(self.entry_end), style=\"secondary.TButton\").pack(side=\"left\")\n",
    "        ToolTip(self.entry_end, \"Bitiş tarihi (YYYY-MM-DD)\")\n",
    "\n",
    "        row3 = ttk.Frame(input_frame)\n",
    "        row3.pack(fill=\"x\", padx=5, pady=5)\n",
    "        ttk.Label(row3, text=\"Tahmini Maliyet (EUR):\").grid(row=0, column=0, padx=5, pady=2, sticky=\"w\")\n",
    "        self.entry_estimated = ttk.Entry(row3, width=field_width)\n",
    "        self.entry_estimated.grid(row=0, column=1, padx=5, pady=2, sticky=\"w\")\n",
    "        ToolTip(self.entry_estimated, \"Tahmini maliyet (sayı, örn: 1000)\")\n",
    "        self.check_status = tk.BooleanVar()\n",
    "        status_check = ttk.Checkbutton(row3, text=\"Tamamlandı?\", variable=self.check_status)\n",
    "        status_check.grid(row=0, column=2, padx=5, pady=2, sticky=\"w\")\n",
    "        ToolTip(status_check, \"Görevin tamamlanıp tamamlanmadığını işaretleyin\")\n",
    "        ttk.Label(row3, text=\"Gerçekleşen Maliyet (EUR):\").grid(row=0, column=3, padx=5, pady=2, sticky=\"w\")\n",
    "        self.entry_actual = ttk.Entry(row3, width=field_width-10)\n",
    "        self.entry_actual.grid(row=0, column=4, padx=5, pady=2, sticky=\"w\")\n",
    "        ToolTip(self.entry_actual, \"Gerçekleşen maliyet (tamamlandıysa, örn: 950)\")\n",
    "\n",
    "        # Buttons\n",
    "        button_width = 20\n",
    "        button_row1 = ttk.Frame(button_frame)\n",
    "        button_row1.pack(fill=\"x\", padx=5, pady=2)\n",
    "        ttk.Button(button_row1, text=\"Görev Ekle\", width=button_width, command=self.add_task, style=\"primary.TButton\").pack(side=\"left\", padx=5)\n",
    "        ttk.Button(button_row1, text=\"Görevi Düzenle\", width=button_width, command=self.load_selected_task, style=\"secondary.TButton\").pack(side=\"left\", padx=5)\n",
    "        ttk.Button(button_row1, text=\"Görevi Güncelle\", width=button_width, command=self.update_task, style=\"success.TButton\").pack(side=\"left\", padx=5)\n",
    "        ttk.Button(button_row1, text=\"Görevi Sil\", width=button_width, command=self.delete_task, style=\"danger.TButton\").pack(side=\"left\", padx=5)\n",
    "\n",
    "        button_row2 = ttk.Frame(button_frame)\n",
    "        button_row2.pack(fill=\"x\", padx=5, pady=2)\n",
    "        ttk.Button(button_row2, text=\"Tüm Görevler\", width=button_width, command=lambda: self.show_tasks(None), style=\"info.TButton\").pack(side=\"left\", padx=5)\n",
    "        ttk.Button(button_row2, text=\"Tamamlananlar\", width=button_width, command=lambda: self.show_tasks(\"Done\"), style=\"success.TButton\").pack(side=\"left\", padx=5)\n",
    "        ttk.Button(button_row2, text=\"Bekleyenler\", width=button_width, command=lambda: self.show_tasks(\"Waiting\"), style=\"warning.TButton\").pack(side=\"left\", padx=5)\n",
    "\n",
    "        button_row3 = ttk.Frame(button_frame)\n",
    "        button_row3.pack(fill=\"x\", padx=5, pady=2)\n",
    "        ttk.Button(button_row3, text=\"Takvimi Aç\", width=button_width, command=self.show_calendar, style=\"primary.TButton\").pack(side=\"left\", padx=5)\n",
    "        ttk.Button(button_row3, text=\"Takvimi PDF'e Aktar\", width=button_width, command=self.export_calendar_pdf, style=\"secondary.TButton\").pack(side=\"left\", padx=5)\n",
    "        ttk.Button(button_row3, text=\"Harcama Hesapla\", width=button_width, command=self.open_calendar_selection, style=\"info.TButton\").pack(side=\"left\", padx=5)\n",
    "        ttk.Button(button_row3, text=\"İstatistikleri Göster\", width=button_width, command=self.show_statistics, style=\"success.TButton\").pack(side=\"left\", padx=5)\n",
    "\n",
    "        button_row4 = ttk.Frame(button_frame)\n",
    "        button_row4.pack(fill=\"x\", padx=5, pady=2)\n",
    "        ttk.Button(button_row4, text=\"Tüm Görevleri Dışa Aktar\", width=button_width, command=self.export_all_tasks, style=\"primary.TButton\").pack(side=\"left\", padx=5)\n",
    "        ttk.Button(button_row4, text=\"Temizle\", width=button_width, command=self.clear_entries, style=\"secondary.TButton\").pack(side=\"left\", padx=5)\n",
    "\n",
    "        # Table\n",
    "        columns = (\"ID\", \"Job Name\", \"Description\", \"Start Date\", \"End Date\", \"Estimated Cost\", \"Actual Cost\", \"Status\")\n",
    "        self.table = ttk.Treeview(table_frame, columns=columns, show=\"headings\", style=\"Treeview\")\n",
    "        column_widths = {\n",
    "            \"ID\": 50,\n",
    "            \"Job Name\": 150,\n",
    "            \"Description\": 200,\n",
    "            \"Start Date\": 100,\n",
    "            \"End Date\": 100,\n",
    "            \"Estimated Cost\": 100,\n",
    "            \"Actual Cost\": 100,\n",
    "            \"Status\": 80\n",
    "        }\n",
    "        for col in columns:\n",
    "            self.table.heading(col, text=col)\n",
    "            self.table.column(col, width=column_widths[col])\n",
    "        scrollbar_y = ttk.Scrollbar(table_frame, orient=\"vertical\", command=self.table.yview)\n",
    "        scrollbar_x = ttk.Scrollbar(table_frame, orient=\"horizontal\", command=self.table.xview)\n",
    "        self.table.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)\n",
    "        scrollbar_y.pack(side=\"right\", fill=\"y\")\n",
    "        scrollbar_x.pack(side=\"bottom\", fill=\"x\")\n",
    "        self.table.pack(side=\"left\", fill=\"both\", expand=True)\n",
    "\n",
    "        # Show initial tasks\n",
    "        self.show_tasks()\n",
    "\n",
    "    def run(self):\n",
    "        \"\"\"Start the application.\"\"\"\n",
    "        self.root.mainloop()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    try:\n",
    "        import pandas\n",
    "        import openpyxl\n",
    "        import tkcalendar\n",
    "        import matplotlib\n",
    "    except ImportError as e:\n",
    "        print(f\"Hata: Gerekli kütüphane eksik: {e}\")\n",
    "        print(\"Lütfen aşağıdaki komutları çalıştırarak gerekli kütüphaneleri kurun:\")\n",
    "        print(\"pip install pandas openpyxl tkcalendar matplotlib ttkbootstrap\")\n",
    "        exit(1)\n",
    "\n",
    "    app = FarmTaskTracker()\n",
    "    app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbc0df52-54af-41f7-a83f-e317e266379a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
